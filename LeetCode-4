class Solution {
public:
	double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
		int size1 = nums1.size();
		int size2 = nums2.size();
		if (size1==0)
		{
			return MedofArray(nums2);
		}
		if (size2 == 0)
			return MedofArray(nums1);
		int size = (size1+size2);
		int mid = size / 2;
		int flag = size % 2 ? 0 : 1;//当时偶数的时候同一个加两次，除以2，为了最后面的操作统一
		vector<int> nums3;
		int m1,m2,i;//双指针
		double a, b;
		for (m1 = m2 = i = 0; i < size; i++)
		{
			a = m1 < size1 ? nums1[m1] : INT_MAX;
			b = m2 < size2 ? nums2[m2] : INT_MAX;
			if (a < b)
			{
				nums3.push_back(nums1[m1]);
				m1++;
			}
			else
			{
				nums3.push_back(nums2[m2]);
				m2++;
			}
			if (i == mid)
				break;
		}
		return (nums3[mid] + nums3[mid - flag]) / 2.0;
	}
	double MedofArray(vector<int>& nums)
	{
		int mid = nums.size() / 2;
		int flag = !(nums.size() % 2);
		return (nums[mid] + nums[mid - flag]) / 2.0;
	}
};
